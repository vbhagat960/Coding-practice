/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void traverse(TreeNode* root,int row,int col,
                  map< int,priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> >&mp)
    {
        if(root != NULL)
        {
            mp[col].push(make_pair(row,root->val));
            traverse(root->left,row+1,col-1,mp);
            traverse(root->right,row+1,col+1,mp);
        }
    }
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        map<int,priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>> mp;
        vector<vector<int>> ret;
        traverse(root,0,0,mp); 
        for(auto i : mp)
        {
            vector<int> v;
            while(! i.second.empty())
            {
                v.push_back(i.second.top().second);
                i.second.pop();
            }
            ret.push_back(v);
        }
         return ret;
    }
};
